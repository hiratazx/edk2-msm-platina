#
#  Copyright (c) 2018, Linaro Limited. All rights reserved.
#
#  This program and the accompanying materials
#  are licensed and made available under the terms and conditions of the BSD License
#  which accompanies this distribution.  The full text of the license may be found at
#  http://opensource.org/licenses/bsd-license.php
#
#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
#

################################################################################
#
# FD Section
# The [FD] Section is made up of the definition statements and a
# description of what goes into  the Flash Device Image.  Each FD section
# defines one flash "device" image.  A flash device image may be one of
# the following: Removable media bootable image (like a boot floppy
# image,) an Option ROM image (that would be "flashed" into an add-in
# card,) a System "Flash"  image (that would be burned into a system's
# flash) or an Update ("Capsule") image that will be used to update and
# existing system flash.
#
################################################################################

[FD.sdm660_UEFI]
BaseAddress   = $(FD_BASE)|gArmTokenSpaceGuid.PcdFdBaseAddress  # The base address of the Firmware
Size          = $(FD_SIZE)|gArmTokenSpaceGuid.PcdFdSize
ErasePolarity = 1

# This one is tricky, it must be: BlockSize * NumBlocks = Size
BlockSize     = 0x00001000
NumBlocks     = 0x2000

################################################################################
#
# Following are lists of FD Region layout which correspond to the locations of different
# images within the flash device.
#
# Regions must be defined in ascending order and may not overlap.
#
# A Layout Region start with a eight digit hex offset (leading "0x" required) followed by
# the pipe "|" character, followed by the size of the region, also in hex with the leading
# "0x" characters. Like:
# Offset|Size
# PcdOffsetCName|PcdSizeCName
# RegionType <FV, DATA, or FILE>
#
################################################################################

0x00000000|0x02000000
gArmTokenSpaceGuid.PcdFvBaseAddress|gArmTokenSpaceGuid.PcdFvSize
FV = FVMAIN_COMPACT

################################################################################
#
# FV Section
#
# [FV] section is used to define what components or modules are placed within a flash
# device file.  This section also defines order the components and modules are positioned
# within the image.  The [FV] section consists of define statements, set statements and
# module statements.
#
################################################################################

[FV.FvMain]
BlockSize          = 0x40
NumBlocks          = 0         # This FV gets compressed so make it just big enough
FvAlignment        = 8         # FV alignment and FV attributes setting.
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE

# Apriori
!include Platform/Qualcomm/sdm660/Apriori.fdf.inc

  INF MdeModulePkg/Core/Dxe/DxeMain.inf

  #
  # PI DXE Drivers producing Architectural Protocols (EFI Services)
  #
  INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf
  INF ArmPkg/Drivers/CpuDxe/CpuDxe.inf
  INF MdeModulePkg/Core/RuntimeDxe/RuntimeDxe.inf
  INF MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe.inf

!if $(SECURE_BOOT_ENABLE) == TRUE
!include ArmPlatformPkg/SecureBootDefaultKeys.fdf.inc
  INF SecurityPkg/VariableAuthenticated/SecureBootConfigDxe/SecureBootConfigDxe.inf
  INF SecurityPkg/EnrollFromDefaultKeysApp/EnrollFromDefaultKeysApp.inf
  INF SecurityPkg/VariableAuthenticated/SecureBootDefaultKeysDxe/SecureBootDefaultKeysDxe.inf
!endif

  INF MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe.inf
  INF EmbeddedPkg/EmbeddedMonotonicCounter/EmbeddedMonotonicCounter.inf
  INF MdeModulePkg/Universal/ResetSystemRuntimeDxe/ResetSystemRuntimeDxe.inf
  INF EmbeddedPkg/RealTimeClockRuntimeDxe/RealTimeClockRuntimeDxe.inf
  INF MdeModulePkg/Universal/ReportStatusCodeRouter/RuntimeDxe/ReportStatusCodeRouterRuntimeDxe.inf
  INF MdeModulePkg/Universal/StatusCodeHandler/RuntimeDxe/StatusCodeHandlerRuntimeDxe.inf
  INF EmbeddedPkg/MetronomeDxe/MetronomeDxe.inf

  #
  # Multiple Console IO support
  #
  INF EmbeddedPkg/SimpleTextInOutSerial/SimpleTextInOutSerial.inf
  INF MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe.inf
  INF MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe.inf
  INF MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe.inf
  INF MdeModulePkg/Universal/Console/TerminalDxe/TerminalDxe.inf

  INF ArmPkg/Drivers/ArmGic/ArmGicDxe.inf
  INF ArmPkg/Drivers/TimerDxe/TimerDxe.inf

  INF MdeModulePkg/Universal/WatchdogTimerDxe/WatchdogTimer.inf

# BSP drivers
!include Platform/Qualcomm/sdm660/dxe.fdf.inc

  # INF Silicon/Qualcomm/sdm660/Drivers/sdm660Dxe/sdm660Dxe.inf
  INF Silicon/Qualcomm/QcomPkg/Drivers/SimpleFbDxe/SimpleFbDxe.inf

  #
  # USB Host Support
  #
  INF MdeModulePkg/Bus/Usb/UsbBusDxe/UsbBusDxe.inf
  INF MdeModulePkg/Bus/Usb/UsbMouseDxe/UsbMouseDxe.inf
  INF MdeModulePkg/Bus/Usb/UsbMassStorageDxe/UsbMassStorageDxe.inf

  #
  # FAT filesystem + GPT/MBR partitioning
  #
  INF MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe.inf
  INF MdeModulePkg/Universal/Disk/PartitionDxe/PartitionDxe.inf
  INF FatPkg/EnhancedFatDxe/Fat.inf
  INF MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe.inf
  INF MdeModulePkg/Universal/FvSimpleFileSystemDxe/FvSimpleFileSystemDxe.inf
  INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableRuntimeDxe.inf

  INF MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe.inf

  #
  # ACPI Support
  #
  INF MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe.inf
  INF MdeModulePkg/Universal/Acpi/AcpiPlatformDxe/AcpiPlatformDxe.inf
  INF MdeModulePkg/Universal/Acpi/BootGraphicsResourceTableDxe/BootGraphicsResourceTableDxe.inf
  # INF RuleOverride = ACPITABLE sdm660Pkg/AcpiTables/AcpiTables.inf

  #
  # FDT support
  #
  INF EmbeddedPkg/Drivers/DtPlatformDxe/DtPlatformDxe.inf

  #
  # SMBIOS Support
  #
  INF Platform/RenegadePkg/Drivers/PlatformSmbiosDxe/PlatformSmbiosDxe.inf
  INF MdeModulePkg/Universal/SmbiosDxe/SmbiosDxe.inf

  #
  # UEFI applications
  #
  INF ShellPkg/Application/Shell/Shell.inf
!ifdef $(INCLUDE_TFTP_COMMAND)
  INF ShellPkg/DynamicCommand/TftpDynamicCommand/TftpDynamicCommand.inf
!endif #$(INCLUDE_TFTP_COMMAND)

  INF Platform/EFI_Binaries/Applications/LinuxSimpleMassStorage/LinuxSimpleMassStorage.inf

  #
  # Bds
  #
  INF MdeModulePkg/Universal/PrintDxe/PrintDxe.inf
  INF MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe.inf
  INF MdeModulePkg/Universal/DisplayEngineDxe/DisplayEngineDxe.inf
  INF MdeModulePkg/Universal/SetupBrowserDxe/SetupBrowserDxe.inf
  INF MdeModulePkg/Universal/DriverHealthManagerDxe/DriverHealthManagerDxe.inf
  INF MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
  INF MdeModulePkg/Application/UiApp/UiApp.inf
  INF Platform/RenegadePkg/Drivers/LogoDxe/LogoDxe.inf

  #
  # Some platina stuff
  #
  INF Binaries/platina/QcomPkg/Drivers/PlatformInfoDxe/PlatformInfoDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/ButtonsDxe/ButtonsDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/PmicDxe/PmicDxeLa.inf
  INF Binaries/platina/QcomPkg/Drivers/ChargerExDxe/ChargerExDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/QcomChargerDxe/QcomChargerDxeLA.inf
  INF Binaries/platina/QcomPkg/Drivers/AdcDxe/AdcDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/TsensDxe/TsensDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/LimitsDxe/LimitsDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/MpPowerDxe/MpPowerDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/UsbfnDwc3Dxe/UsbfnDwc3Dxe.inf
  INF Binaries/platina/QcomPkg/Drivers/UsbMsdDxe/UsbMsdDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/UsbDeviceDxe/UsbDeviceDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/UsbConfigDxe/UsbConfigDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/HashDxe/HashDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/RNGDxe/RngDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/QdssDxe/QdssDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/DisplayDxe/DisplayDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/DALSYSDxe/DALSYSDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/ClockDxe/ClockDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/HWIODxe/HWIODxe.inf
  INF Binaries/platina/QcomPkg/Drivers/I2CDxe/I2CDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/SPIDxe/SPIDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/SPMIDxe/SPMIDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/SdccDxe/SdccDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/UFSDxe/UFSDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/TLMMDxe/TLMMDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/ULogDxe/ULogDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/NpaDxe/NpaDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/ChipInfoDxe/ChipInfoDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/GLinkDxe/GLinkDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/SmemDxe/SmemDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/FontDxe/FontDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/EnvDxe/EnvDxe.inf
  INF Binaries/platina/QcomPkg/Drivers/MdtpDxe/MdtpDxe.inf

  #
  # Windows kernel patcher
  #
  INF Platform/RenegadePkg/Drivers/KernelErrataPatcher/KernelErrataPatcher.inf
  
  #
  # Simple Init GUI
  #
  INF src/main/SimpleInitMain.inf

  INF src/kernelfdt/KernelFdtDxe.inf

!if $(AB_SLOTS_SUPPORT) == TRUE
  INF GPLDrivers/Drivers/BootSlotDxe/BootSlotDxe.inf
  INF GPLDrivers/Application/SwitchSlotsApp/SwitchSlotsApp.inf
!endif

# Device specific fdf
!include $(DEVICE_DXE_FV_COMPONENTS)

[FV.FVMAIN_COMPACT]
FvAlignment        = 8
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE

  INF Silicon/Qualcomm/QcomPkg/PrePi/PrePi.inf

  FILE FV_IMAGE = 9E21FD93-9C72-4c15-8C4B-E77F1DB2D792 {
    SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
      SECTION FV_IMAGE = FVMAIN
    }
  }

!include Silicon/Qualcomm/QcomPkg/QcomCommonFdf.inc


